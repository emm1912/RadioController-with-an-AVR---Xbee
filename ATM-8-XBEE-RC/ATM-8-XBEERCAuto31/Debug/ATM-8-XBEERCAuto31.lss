
ATM-8-XBEERCAuto31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001d4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000268  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000009c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000389  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000cc  00000000  00000000  00000dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000349  00000000  00000000  00000e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e8  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000068  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ed       	ldi	r30, 0xD4	; 212
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 36       	cpi	r26, 0x61	; 97
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	0e d0       	rcall	.+28     	; 0x76 <main>
  5a:	ba c0       	rjmp	.+372    	; 0x1d0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <read_adc>:
#include <avr/io.h>
#include <avr/wdt.h>
char ReceivedByte;

int read_adc(int channel){
	ADMUX&=0b11110000;              //Clear the older channel that was read
  5e:	97 b1       	in	r25, 0x07	; 7
  60:	90 7f       	andi	r25, 0xF0	; 240
  62:	97 b9       	out	0x07, r25	; 7
	ADMUX|=channel;                 //Defines the new ADC channel to be read
  64:	97 b1       	in	r25, 0x07	; 7
  66:	89 2b       	or	r24, r25
  68:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);              //Starts a new conversion
  6a:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));        //Wait until the conversion is done
  6c:	36 99       	sbic	0x06, 6	; 6
  6e:	fe cf       	rjmp	.-4      	; 0x6c <read_adc+0xe>
	return ADCH;                    //Returns the ADC value of the chosen channel
  70:	85 b1       	in	r24, 0x05	; 5
}
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <main>:

int main(void)
{
	    wdt_disable();
  76:	98 e1       	ldi	r25, 0x18	; 24
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	f8 94       	cli
  7c:	91 bd       	out	0x21, r25	; 33
  7e:	11 bc       	out	0x21, r1	; 33
  80:	0f be       	out	0x3f, r0	; 63
	    DDRB=0b00000000;                                             //0 IN/entradas
  82:	17 ba       	out	0x17, r1	; 23
		PORTB=0b11111111;                                            //Pullup PuertoB
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	88 bb       	out	0x18, r24	; 24
		DDRD=0b10000000;                                             //1 out - PD0/PD1 Serial - PD2-PD5 Entradas- PD6 Entrada boton start - PD7 Salida para LED ENCENDIDO
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	81 bb       	out	0x11, r24	; 17
		DDRC=0b00000000;                                             //PCO-PC3 ADC - PC4 Libre - PC5 Entrada para boton start
  8c:	14 ba       	out	0x14, r1	; 20
		PORTC=0b00100000;                                            //Pullup * PC5 para boton start
  8e:	20 e2       	ldi	r18, 0x20	; 32
  90:	25 bb       	out	0x15, r18	; 21
		//Puerto C solo para ADC
	    //Configuracion ADC
	    ADMUX=_BV(ADLAR);                                            //alineacion a la izquierda
  92:	27 b9       	out	0x07, r18	; 7
	    ADCSRA=_BV(ADEN)|_BV(ADSC)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0); //act ADC,act start convertion,Bits preescala
  94:	27 ec       	ldi	r18, 0xC7	; 199
  96:	26 b9       	out	0x06, r18	; 6
	    //Inicializar USART
	    UCSRB=_BV(RXEN)|_BV(TXEN);                                   //Enables RX y TX
  98:	9a b9       	out	0x0a, r25	; 10
	    UCSRC=_BV(URSEL)|_BV(UCSZ1)|_BV(UCSZ0);                      //Selects between accessing the UCSRC or the UBRRH Register -- 8 data Bits
  9a:	96 e8       	ldi	r25, 0x86	; 134
  9c:	90 bd       	out	0x20, r25	; 32
	    UBRRH=(BAUD_PRESCALE>>8);                                    //Baud rate value
  9e:	10 bc       	out	0x20, r1	; 32
	    UBRRL=BAUD_PRESCALE;                                         //Baud rate value
  a0:	93 e3       	ldi	r25, 0x33	; 51
  a2:	99 b9       	out	0x09, r25	; 9
		int x;
		x=0;
		PORTD=0b10000000;                                            //Prender PD7 Indica que no se ha hecho la conexión
  a4:	82 bb       	out	0x12, r24	; 18
		wdt_enable(WDTO_1S);                                     
  a6:	2e e0       	ldi	r18, 0x0E	; 14
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	a8 95       	wdr
  b2:	81 bd       	out	0x21, r24	; 33
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	21 bd       	out	0x21, r18	; 33
		//loop_until_bit_is_clear(PINC,5);                             //Boton inicio de transferencia de datos                                
		 
						 //Estoy encendido preparate confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};           // Do nothing until UDR is ready for more data to be written to it
			                UDR=9;                                   // Enviar valor de "9" se prendio control
  b8:	99 e0       	ldi	r25, 0x09	; 9
		wdt_enable(WDTO_1S);                                     
		//loop_until_bit_is_clear(PINC,5);                             //Boton inicio de transferencia de datos                                
		 
						 //Estoy encendido preparate confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};           // Do nothing until UDR is ready for more data to be written to it
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <main+0x44>
			                UDR=9;                                   // Enviar valor de "9" se prendio control
  be:	9c b9       	out	0x0c, r25	; 12
		                    while((UCSRA&(1<<RXC))==0){};            // Do nothing until data have been received and is ready to be read from UDR
  c0:	5f 9b       	sbis	0x0b, 7	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x4a>
			                ReceivedByte=UDR;                        // Fetch the received byte value into the variable " ByteReceived "
  c4:	8c b1       	in	r24, 0x0c	; 12
  c6:	80 93 60 00 	sts	0x0060, r24
		                    }while(ReceivedByte!=10);                                            
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	b1 f7       	brne	.-20     	; 0xba <main+0x44>
		PORTD=0b00000000;                                            //Led indicador de CONECTADO(Cuando se apaga para ahorrar bateria) - Tambien quiere decir que estan conectados
  ce:	12 ba       	out	0x12, r1	; 18
 		   while(x==0){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                       // Do nothing until UDR is ready for more data to be written to it
			                UDR=1;                                               //Enviar valor de "1" indica se va a enviar el dato Numero 1
  d0:	01 e0       	ldi	r16, 0x01	; 1
 		   while(x==1){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                     
			                UDR=2;                                             
  d2:	12 e0       	ldi	r17, 0x02	; 2
 		   while(x==2){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                     
			                UDR=3;                                             
  d4:	d3 e0       	ldi	r29, 0x03	; 3
 		   while(x==3){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                     
			                UDR=4;                                             
  d6:	c4 e0       	ldi	r28, 0x04	; 4
 		   while(x==4){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "55" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                     
			                UDR=5;                                             
  d8:	0f 2e       	mov	r0, r31
  da:	f5 e0       	ldi	r31, 0x05	; 5
  dc:	ff 2e       	mov	r15, r31
  de:	f0 2d       	mov	r31, r0
		                    }while(ReceivedByte!=10);                                            
		PORTD=0b00000000;                                            //Led indicador de CONECTADO(Cuando se apaga para ahorrar bateria) - Tambien quiere decir que estan conectados
		
    for (;;)
    {
		wdt_reset();
  e0:	a8 95       	wdr
 		   while(x==0){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                       // Do nothing until UDR is ready for more data to be written to it
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x6c>
			                UDR=1;                                               //Enviar valor de "1" indica se va a enviar el dato Numero 1
  e6:	0c b9       	out	0x0c, r16	; 12
		                    while((UCSRA&(1<<RXC))==0){};                        // Do nothing until data have been received and is ready to be read from UDR
  e8:	5f 9b       	sbis	0x0b, 7	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <main+0x72>
			                ReceivedByte=UDR;                                    // Fetch the received byte value into the variable " ByteReceived "
  ec:	8c b1       	in	r24, 0x0c	; 12
  ee:	80 93 60 00 	sts	0x0060, r24
		                    }while(ReceivedByte!=11);	
  f2:	8b 30       	cpi	r24, 0x0B	; 11
  f4:	b1 f7       	brne	.-20     	; 0xe2 <main+0x6c>
							
						//Ya recibiste dato 1 confirma-Mientras sea diferente de 'a' (Caracter) seguira el ciclo
				         do{	                                                    				
					        while((UCSRA&(1<<UDRE))==0){};     				  
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <main+0x80>
			                UDR=read_adc(x);                   
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	af df       	rcall	.-162    	; 0x5e <read_adc>
 100:	8c b9       	out	0x0c, r24	; 12
					        while((UCSRA&(1<<RXC))==0){};  			
 102:	5f 9b       	sbis	0x0b, 7	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <main+0x8c>
					        ReceivedByte=UDR;			
 106:	8c b1       	in	r24, 0x0c	; 12
 108:	80 93 60 00 	sts	0x0060, r24
							}while(ReceivedByte!=12);
 10c:	8c 30       	cpi	r24, 0x0C	; 12
 10e:	99 f7       	brne	.-26     	; 0xf6 <main+0x80>
						x=1;
						wdt_reset();
 110:	a8 95       	wdr
			   	
 		   while(x==1){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                     
 112:	5d 9b       	sbis	0x0b, 5	; 11
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x9c>
			                UDR=2;                                             
 116:	1c b9       	out	0x0c, r17	; 12
		                    while((UCSRA&(1<<RXC))==0){};                       
 118:	5f 9b       	sbis	0x0b, 7	; 11
 11a:	fe cf       	rjmp	.-4      	; 0x118 <main+0xa2>
			                ReceivedByte=UDR;                              
 11c:	8c b1       	in	r24, 0x0c	; 12
 11e:	80 93 60 00 	sts	0x0060, r24
		                    }while(ReceivedByte!=13);	
 122:	8d 30       	cpi	r24, 0x0D	; 13
 124:	b1 f7       	brne	.-20     	; 0x112 <main+0x9c>
							
						//Ya recibiste dato 1 confirma-Mientras sea diferente de 'a' (Caracter) seguira el ciclo
				         do{	                                                    				
					        while((UCSRA&(1<<UDRE))==0){};     				  
 126:	5d 9b       	sbis	0x0b, 5	; 11
 128:	fe cf       	rjmp	.-4      	; 0x126 <main+0xb0>
			                UDR=read_adc(x);                   
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	97 df       	rcall	.-210    	; 0x5e <read_adc>
 130:	8c b9       	out	0x0c, r24	; 12
					        while((UCSRA&(1<<RXC))==0){};  			
 132:	5f 9b       	sbis	0x0b, 7	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <main+0xbc>
					        ReceivedByte=UDR;			
 136:	8c b1       	in	r24, 0x0c	; 12
 138:	80 93 60 00 	sts	0x0060, r24
							}while(ReceivedByte!=14);
 13c:	8e 30       	cpi	r24, 0x0E	; 14
 13e:	99 f7       	brne	.-26     	; 0x126 <main+0xb0>
						x=2;
						wdt_reset();
 140:	a8 95       	wdr
					   
 		   while(x==2){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                     
 142:	5d 9b       	sbis	0x0b, 5	; 11
 144:	fe cf       	rjmp	.-4      	; 0x142 <main+0xcc>
			                UDR=3;                                             
 146:	dc b9       	out	0x0c, r29	; 12
		                    while((UCSRA&(1<<RXC))==0){};                       
 148:	5f 9b       	sbis	0x0b, 7	; 11
 14a:	fe cf       	rjmp	.-4      	; 0x148 <main+0xd2>
			                ReceivedByte=UDR;                              
 14c:	8c b1       	in	r24, 0x0c	; 12
 14e:	80 93 60 00 	sts	0x0060, r24
		                    }while(ReceivedByte!=15);	
 152:	8f 30       	cpi	r24, 0x0F	; 15
 154:	b1 f7       	brne	.-20     	; 0x142 <main+0xcc>
							
						//Ya recibiste dato 1 confirma-Mientras sea diferente de 'a' (Caracter) seguira el ciclo
				         do{	                                                    				
					        while((UCSRA&(1<<UDRE))==0){};     				  
 156:	5d 9b       	sbis	0x0b, 5	; 11
 158:	fe cf       	rjmp	.-4      	; 0x156 <main+0xe0>
			                UDR=read_adc(x);                   
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	7f df       	rcall	.-258    	; 0x5e <read_adc>
 160:	8c b9       	out	0x0c, r24	; 12
					        while((UCSRA&(1<<RXC))==0){};  			
 162:	5f 9b       	sbis	0x0b, 7	; 11
 164:	fe cf       	rjmp	.-4      	; 0x162 <main+0xec>
					        ReceivedByte=UDR;			
 166:	8c b1       	in	r24, 0x0c	; 12
 168:	80 93 60 00 	sts	0x0060, r24
							}while(ReceivedByte!=16);
 16c:	80 31       	cpi	r24, 0x10	; 16
 16e:	99 f7       	brne	.-26     	; 0x156 <main+0xe0>
						x=3;
						wdt_reset();
 170:	a8 95       	wdr
       
 		   while(x==3){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "11" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                     
 172:	5d 9b       	sbis	0x0b, 5	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <main+0xfc>
			                UDR=4;                                             
 176:	cc b9       	out	0x0c, r28	; 12
		                    while((UCSRA&(1<<RXC))==0){};                       
 178:	5f 9b       	sbis	0x0b, 7	; 11
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0x102>
			                ReceivedByte=UDR;                              
 17c:	8c b1       	in	r24, 0x0c	; 12
 17e:	80 93 60 00 	sts	0x0060, r24
		                    }while(ReceivedByte!=17);	
 182:	81 31       	cpi	r24, 0x11	; 17
 184:	b1 f7       	brne	.-20     	; 0x172 <main+0xfc>
							
						//Ya recibiste dato 1 confirma-Mientras sea diferente de 'a' (Caracter) seguira el ciclo
				         do{	                                                    				
					        while((UCSRA&(1<<UDRE))==0){};     				  
 186:	5d 9b       	sbis	0x0b, 5	; 11
 188:	fe cf       	rjmp	.-4      	; 0x186 <main+0x110>
			                UDR=read_adc(x);                   
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	67 df       	rcall	.-306    	; 0x5e <read_adc>
 190:	8c b9       	out	0x0c, r24	; 12
					        while((UCSRA&(1<<RXC))==0){};  			
 192:	5f 9b       	sbis	0x0b, 7	; 11
 194:	fe cf       	rjmp	.-4      	; 0x192 <main+0x11c>
					        ReceivedByte=UDR;			
 196:	8c b1       	in	r24, 0x0c	; 12
 198:	80 93 60 00 	sts	0x0060, r24
							}while(ReceivedByte!=18);
 19c:	82 31       	cpi	r24, 0x12	; 18
 19e:	99 f7       	brne	.-26     	; 0x186 <main+0x110>
						x=4;
						wdt_reset();
 1a0:	a8 95       	wdr
					   
 		   while(x==4){
				
				       //Voy a enviar dato 1 confirma-Minetras sea diferente de "55" (Decimal) seguira el ciclo
					     do{                                                        
			                while((UCSRA&(1<<UDRE))==0){};                     
 1a2:	5d 9b       	sbis	0x0b, 5	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <main+0x12c>
			                UDR=5;                                             
 1a6:	fc b8       	out	0x0c, r15	; 12
		                    while((UCSRA&(1<<RXC))==0){};                       
 1a8:	5f 9b       	sbis	0x0b, 7	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <main+0x132>
			                ReceivedByte=UDR;                              
 1ac:	8c b1       	in	r24, 0x0c	; 12
 1ae:	80 93 60 00 	sts	0x0060, r24
		                    }while(ReceivedByte!=19);	
 1b2:	83 31       	cpi	r24, 0x13	; 19
 1b4:	b1 f7       	brne	.-20     	; 0x1a2 <main+0x12c>
							
						//Ya recibiste dato 1 confirma-Mientras sea diferente de 'e' (Caracter) seguira el ciclo
				         do{	                                                    				
					        while((UCSRA&(1<<UDRE))==0){};     				  
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <main+0x140>
			                UDR=PINB;                   
 1ba:	86 b3       	in	r24, 0x16	; 22
 1bc:	8c b9       	out	0x0c, r24	; 12
					        while((UCSRA&(1<<RXC))==0){};  			
 1be:	5f 9b       	sbis	0x0b, 7	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <main+0x148>
					        ReceivedByte=UDR;			
 1c2:	8c b1       	in	r24, 0x0c	; 12
 1c4:	80 93 60 00 	sts	0x0060, r24
							}while(ReceivedByte!=20);
 1c8:	84 31       	cpi	r24, 0x14	; 20
 1ca:	a9 f7       	brne	.-22     	; 0x1b6 <main+0x140>
						x=0;
						wdt_reset();
 1cc:	a8 95       	wdr
 1ce:	88 cf       	rjmp	.-240    	; 0xe0 <main+0x6a>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
